component: frontend
enabled: true

# -- Override name
nameOverride:
# -- Override fullname
fullnameOverride: grafana

image:
  # -- Image repository
  repository: grafana/grafana-oss
  # [Image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy)
  pullPolicy: IfNotPresent
   # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- [Image pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
imagePullSecrets: []

# -- Additional pod annotations
podAnnotations: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext:
  # -- Run as Grafana user
  runAsUser: 472
  fsGroup: 0

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Type of service for http
  type: ClusterIP
  # -- Service port for http
  port: 3000

# -- Number of replicas. Only used if autoscaling.enabled = false
replicaCount: 1
autoscaling:
  # -- Enable/disable pod autoscaling, if disabled `replicaCount` is used to set number of pods.
  # Note: If autoscaling is enabled, a database (`database.enable: true`) should be used as Grafana backend.
  enabled: false
  # -- Minimum number of replicas
  minReplicas: 1
  # -- Maximum number of replicas
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

ingress:
  # -- Enable/disable ingress
  enabled: true
  # -- Name of the [IngressClass](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)
  # to use in Ingress routes.
  className: nginx
  # -- List of [FQDNs](https://de.wikipedia.org/wiki/Fully-Qualified_Host_Name) for this Ingress.
  # Note: All FQDNs will be used for Ingress hosts and TLS certificate.
  # The global setting overwrites this setting. Note: The first domain in the list will be used
  # as FROST-Server serviceRootURL and MQTT host.
  domains: []
  # -- Additional Ingress annotations
  annotations:
  # -- Make Grafana available at a subpath. By default Grafana will be available from [DOMAIN]/
  # Don't append or prepend :// or /
  subpath: grafana
  certManager:
    # -- eMail address for ACME registration with Let's Encrypt. Only used for issuerType = namespace.
    issuerEmail: me@example.com
    # -- Type of [cert-manager](https://cert-manager.io/docs/) Issuer: Use either "namespace" or "cluster".
    issuerType: namespace
    # -- Name of the Issuer to use. For certManager.type = namespace
    # `letsencrypt-staging`, `letsencrypt-prod` and `self-signed` are available.
    issuerName: letsencrypt-staging

install:
  # -- Grafana plugins to install
  plugins: "grafana-clock-panel,grafana-simple-json-datasource,
      ,marcusolsson-json-datasource,snuids-svg-panel,
      snuids-trafficlights-panel,citilogics-geoloop-panel,marcusolsson-hourly-heatmap-panel,
      iosb-sensorthings-datasource,yesoreyeram-boomtheme-panel,fatcloud-windrose-panel,
      https://github.com/briangann/grafana-gauge-panel/releases/download/v0.0.9/briangann-gauge-panel-0.0.9.zip;briangann-gauge-panel"

http:
  # -- Enable/disable Grafana GZIP encoding
  enableGzip: true

security:
  # -- Grafana admin username
  adminUsername: admin
  # -- Grafana admin password
  adminPassword: changeMe
  # -- Allow/disallow embedding of Grafana panels
  allowEmbedding: false

featureToggles:
  # -- Space separated list of [features](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/feature-toggles/) to enable.
  # See [docs](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#feature_toggles) for more.
  enable: "publicDashboards"

dateFormats:
  fullDate: "dd, DD.MM.YYYY HH:mm:ss"
  interval:
    month: "YYYY.MM"
    day: "dd, DD.MM"
    hour: "dd, DD.MM HH:mm"
    minute: "dd, HH:mm"

# -- Extra environment variables
extraEnv: {}

persistence:
  # -- StorageClass to use, leave empty to use default StorageClass.
  storageClassName:
  data:
    # -- Mount path of the storage
    mountPath: /var/lib/grafana
    # -- Storage [access modes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes)
    accessModes:
      - ReadWriteOnce
    # -- Storage [capacity](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#capacity)
    capacity: 2Gi

database:
  # -- Enable/disable [Grafana database](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#database).
  # If database is enabled, the persistence settings are disabled, as no SQLite DB is needed.
  enabled: false
  sslmode: disable
  type: postgres
  host: frostdb
  port: 5432
  dbname: grafana
  auth:
    username: postgres
    password: changeMe

smtp:
  # -- Enable/disable SMTP server,
  # see [Grafana SMTP](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp)
  # for more.
  enabled: false
  # -- SMTP Host with port,
  # see [Grafana SMTP](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp)
  # for more.
  host: my.smtp.com:465
  # -- SMTP username,
  # see [Grafana SMTP](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp)
  # for more.
  user: username
  # -- SMTP password,
  # see [Grafana SMTP](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp)
  # for more.
  password: changeMe
  # -- SMTP from email address,
  # see [Grafana SMTP](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp)
  # for more.
  mailFrom: mailFrom@example.com
  # -- Sender Name,
  # see [Grafana SMTP](https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#smtp)
  # for more.
  nameFrom: "myGrafana instance"

startupProbe:
  # -- Enable/disable startup probe
  # [Startup probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `startup.probe: {}` to configure
  # [startupProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 20
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ bash, -c, 'wget -S "http://127.0.0.1:3000/api/health" |& grep "200 OK"' ]

livenessProbe:
  # -- Enable/disable liveness probe
  # [Liveness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `livenessProbe.probe: {}` to configure
  # [livenessProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ bash, -c, 'wget -S "http://127.0.0.1:3000/api/health" |& grep "200 OK"' ]

readinessProbe:
  # -- Enable/disable readiness probe
  # [Readiness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `readinessProbe.probe: {}` to configure
  # [readinessProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ bash, -c, 'wget -S "http://127.0.0.1:3000/api/health" |& grep "200 OK"' ]

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 256Mi

nodeSelector: {}
tolerations: []
affinity: {}
