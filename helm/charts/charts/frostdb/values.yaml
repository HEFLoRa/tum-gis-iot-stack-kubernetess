enabled: true
component: database

# -- Override name
nameOverride:
# -- Override fullname
fullnameOverride: frostdb

loadBalancer:
  # -- Enable/disable a LoadBalancer service for external Database access
  enabled: false

image:
  # -- Image repository
  repository: postgis/postgis
  # -- Image pull policy
  pullPolicy: IfNotPresent
   # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""

# -- [Image pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
imagePullSecrets: []

# -- Additional pod annotations
podAnnotations: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# -- Database port
port: 5432
# -- Database name
dbname: frost
auth:
  # -- Database user
  username: postgres
  # -- Database password
  password: changeMe

# -- Extra environment variables
extraEnv: {}

persistence:
  # -- StorageClass to use, leave empty to use default StorageClass.
  storageClassName:
  # -- Mount path of the storage. Omit trailing `/` !
  mountPath: /mydata
  # -- Subpath inside `mountPath` for the postgres data folder
  pgdataSubPath: /pgdata
  # -- Storage [access modes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes)
  accessModes:
    - ReadWriteOnce
  # -- Storage [capacity](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#capacity)
  capacity: 4Gi

startupProbe:
  # -- Enable/disable startup probe
  # [Startup probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `startup.probe: {}` to configure
  # [startupProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 20
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 10
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

livenessProbe:
  # -- Enable/disable liveness probe
  # [Liveness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `livenessProbe.probe: {}` to configure
  # [livenessProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

readinessProbe:
  # -- Enable/disable readiness probe
  # [Readiness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
  # See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
  # Use `readinessProbe.probe: {}` to configure
  # [readinessProbe probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  probe:
    exec:
      command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

resources:
  limits:
    cpu: 2000m
    memory: 4Gi
  requests:
    cpu: 1000m
    memory: 1Gi

nodeSelector: {}
tolerations: []
affinity: {}
