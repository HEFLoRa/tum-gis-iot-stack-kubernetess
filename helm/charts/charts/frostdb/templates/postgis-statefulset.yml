{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "frostdb.fullname" . }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "frostdb.labels" . | nindent 4 }}
    app.kubernetes.io/part-of: tum-gis-iot-stack-k8s
    app.kubernetes.io/component: {{ .Values.component }}
spec:
  serviceName: {{ include "frostdb.fullname" . }}-hl
  selector:
    matchLabels:
      {{- include "frostdb.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Values.component }}
  template:
    metadata:
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "frostdb.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.component }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "frostdb.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: postgresdata
          persistentVolumeClaim:
            claimName: {{ include "frostdb.fullname" . }}
        - name: dshm
          emptyDir:
            medium: Memory
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: psql
              containerPort: 5432
              protocol: TCP

          envFrom:
            - configMapRef:
                name: {{ include "frostdb.fullname" . }}
            - secretRef:
                name: {{ include "frostdb.fullname" . }}

          volumeMounts:
            - mountPath: {{ .Values.persistence.mountPath }}
              name: postgresdata
            - mountPath: /dev/shm
              name: dshm

          livenessProbe:
            periodSeconds: 10
            timeoutSeconds: 2
            exec:
              command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

          readinessProbe:
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 2
            exec:
              command: [ sh, -c, "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
