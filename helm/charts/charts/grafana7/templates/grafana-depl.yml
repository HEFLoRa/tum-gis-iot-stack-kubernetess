{{- if .Values.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "grafana7.fullname" . }}-{{ .Values.component }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "grafana7.labels" . | nindent 4 }}
    app.kubernetes.io/part-of: tum-gis-iot-stack-k8s
    app.kubernetes.io/component: {{ .Values.component }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "grafana7.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Values.component }}
  template:
    metadata:
      labels:
        {{- include "grafana7.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.component }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/grafana-configMap.yml") . | sha256sum }}
    spec:
      securityContext:
        runAsUser: 472
        fsGroup: 0

      {{- if not .Values.database.enabled }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "grafana7.fullname" . }}-pvc
      {{ end }}

      {{- if .Values.database.enabled }}
      initContainers:
        - name: wait-for-psql
          image: bwibo/wait-for-psql
          args:
            - "60"
            - {{ .Values.database.host | quote }}
            - {{ .Values.database.port | quote }}
            - {{ .Values.database.dbname | quote }}
            - {{ .Values.database.auth.username | quote }}
            - {{ .Values.database.auth.password | squote }}
      {{ end }}

      containers:
        - name: grafana
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3000

          envFrom:
            - configMapRef:
                name: {{ include "grafana7.fullname" . }}-cfg
            - secretRef:
                name: {{ include "grafana7.fullname" . }}-sct

          livenessProbe:
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
            exec:
              command: [ bash, -c, 'wget -S "http://127.0.0.1:3000/api/health" |& grep "200 OK"' ]
          readinessProbe:
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 5
            exec:
              command: [ bash, -c, 'wget -S "http://127.0.0.1:3000/api/health" |& grep "200 OK"' ]

      {{- if not .Values.database.enabled }}
          volumeMounts:
            - mountPath: {{ .Values.persistence.data.mountPath }}
              name: data
      {{ end }}

          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}
