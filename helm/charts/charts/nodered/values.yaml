enabled: true
component: backend

# -- Override name
nameOverride: ""
# -- Override fullname
fullnameOverride: nodered

image:
  # -- Image repository
  repository: nodered/node-red
  # [Image pull policy](https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy)
  pullPolicy: IfNotPresent
   # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""


# -- [Image pull secrets](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/)
imagePullSecrets: []

# -- Additional pod annotations
podAnnotations: {}

serviceAccount:
  # -- Specifies whether a service account should be created
  create: false
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podSecurityContext:
  # -- Run as Node-RED user
  runAsUser: 1000
  fsGroup: 1000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Type of service for http
  type: ClusterIP
  # -- Service port for http
  port: 3000

# -- Number of replicas.
# Note: As of 2023-01  there is no easy way to scale Node-RED horizontally accross clsuters.
# Leave this set to `1` unless you know what you are doing.
replicaCount: 1

# -- Ingress configuration
ingress:
  # -- Enable/disable ingress
  enabled: true
  # -- Name of the [IngressClass](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class)
  # to use in Ingress routes.
  className: nginx
  # -- List of [FQDNs](https://de.wikipedia.org/wiki/Fully-Qualified_Host_Name) for this Ingress.
  # Note: All FQDNs will be used for Ingress hosts and TLS certificate.
  # The global setting overwrites this setting. Note: The first domain in the list will be used
  # as FROST-Server serviceRootURL and MQTT host.
  domains: []
  # -- Additional Ingress annotations
  annotations:
  # -- Make Node-RED available at a subpath. By default Node-RED will be available from [DOMAIN]/
  # Don't append or prepend :// or /
  subpath: nodered
  certManager:
    # -- eMail address for ACME registration with Let's Encrypt. Only used for issuerType = namespace.
    issuerEmail: me@example.com
    # -- Type of [cert-manager](https://cert-manager.io/docs/) Issuer: Use either "namespace" or "cluster".
    issuerType: namespace
    # -- Name of the Issuer to use. For certManager.type = namespace
    # `letsencrypt-staging`, `letsencrypt-prod` and `self-signed` are available.
    issuerName: letsencrypt-staging

settings:
  # -- Node-RED timezone settings
  tz: "Europe/Berlin"
  # -- Enable/disable Node-RED projects
  enableProjects: true

security:
  # -- Node-RED admin username
  adminUsername: "admin"
  # -- Node-RED admin password. default = `changeMe`
  adminPassword: "$2b$08$2UedHI9nnjDY/LANnfT/ruzyWa.ZGzW46r7xBAvsh8GmlZS70k2e."
  # -- Node-RED credentials secret
  credentialsSecret: "changeMe"

# -- Extra environment variables
extraEnv: {}

persistence:
  # -- Enable/disable persistent storage of settings and flows
  enabled: false
  # -- StorageClass to use, leave empty to use default StorageClass.
  storageClassName:
  data:
    # -- Mount path of the storage
    mountPath: /data
    # -- Storage [access modes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes)
    accessModes:
      - ReadWriteOnce
    # -- Storage [capacity](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#capacity)
    capacity: 2Gi

# -- [Startup probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
startupProbe:
  # -- Enable/disable startup probe
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  # -- Configure [startup probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  probe:
    exec:
      command: [ bash, -c, 'curl http://localhost:1880/ || exit 1' ]

# -- [Liveness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
livenessProbe:
  # -- Enable/disable liveness probe
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 20
  terminationGracePeriodSeconds:
  # -- Configure [startup probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  probe:
    exec:
      command: [ bash, -c, 'curl http://localhost:1880/ || exit 1' ]

# -- [Readiness probe](https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes)
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe) for details.
readinessProbe:
  # -- Enable/disable readiness probe
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 5
  terminationGracePeriodSeconds:
  # -- Configure [startup probe](https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/)
  probe:
    exec:
      command: [ bash, -c, 'curl http://localhost:1880/ || exit 1' ]

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 250Mi

nodeSelector: {}
tolerations: []
affinity: {}
